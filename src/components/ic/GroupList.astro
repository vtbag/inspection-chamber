---
import Group from './Group.astro';
import Style from '@/components/ic/Style.astro';
---

<Group />
<template id="vtbag-ic-group-list">
	<div class="section metal">
		<ul class="group-list"></ul>
	</div>
	<Style />
	<style is:inline is:global>
		.section {
			max-width: fit-content;
		}
		ul {
			display: flex;
			gap: 0.5em;
			flex-wrap: wrap;
			overflow-y: auto;
		}
		li {
			flex: 1 1 auto;
		}
	</style>
</template>
<script>
	class ICGroupList extends HTMLElement {
		#animations: Animation[] = [];
		#dirty = false;
		groups: Map<string, VtbagIcGroupElement>;

		constructor() {
			super();
			this.groups = new Map();
			const root = this.attachShadow({ mode: 'open' });
			root.appendChild(
				(document.getElementById('vtbag-ic-group-list') as HTMLTemplateElement).content.cloneNode(
					true
				)
			);
		}

		get animations() {
			return this.#animations;
		}

		set animations(value: Animation[]) {
			this.#animations = value;
			this.#dirty = true;
			this.render();
		}

		connectedCallback() {
			this.render();
		}

		render() {
			if (this.isConnected && this.#dirty) {
				this.#dirty = false;
				const root = this.shadowRoot!;
				const list = root.querySelector('.group-list')!;
				const newGroups = new Map<string, Animation[]>();
				this.#animations.forEach((anim) => {
					const groupName = (anim.effect as any as KeyframeEffect).pseudoElement?.replace(
						/::view-transition.*\((.*)\)/,
						'$1'
					);
					if (groupName) {
						let group = newGroups.get(groupName);
						if (!group) {
							group = [];
							newGroups.set(groupName, group);
						}
						group.push(anim);
					}
				});

				newGroups.forEach((group, name) => {
					this.refreshGroup(list, name, group);
				});
				this.groups.forEach((group, name) => {
					if (!newGroups.has(name)) {
						group.remove();
						this.groups.delete(name);
					}
				});
				[...list.children]
					.sort((a, b) =>
						(a.children[0] as VtbagIcGroupElement).name
							.replace(/^(-vtbag-)/, '')
							.localeCompare((b.children[0] as VtbagIcGroupElement).name.replace(/^(-vtbag-)/, ''))
					)
					.forEach((c) => list.appendChild(c));
			}
		}
		private refreshGroup(list: Element, name: string, animations: Animation[]) {
			let group = this.groups.get(name)!;
			if (!group) {
				list.insertAdjacentHTML(
					'beforeend',
					`<li class="group-item"><vtbag-ic-group name="${name}"></vtbag-ic-group></li>`
				);
				group = list.lastElementChild!.lastElementChild as VtbagIcGroupElement;
				this.groups.set(name, group);
			}
			if (
				group.animations.length !== animations.length ||
				group.animations.some((a, i) => a !== animations[i])
			) {
				group.animations = animations;
			}
		}
	}
	if (!customElements.get('vtbag-ic-group-list'))
		customElements.define('vtbag-ic-group-list', ICGroupList);
</script>
