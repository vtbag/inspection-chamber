<script>
	import type { Group } from './group';
	import { key } from './scope.ts';

	class ICPseudo extends HTMLElement {
		#initialized = false;
		#computedStyle: CSSStyleDeclaration | undefined;
		#dirty = false;

		constructor() {
			super();
		}
		connectedCallback() {
			if (!this.#initialized) {
				this.#initialized = true;

				let scope;
				let groupElement;
				let name = this.getAttribute('name');
				if (!name) {
					name = '::view-transition';
					scope = (this.closest('vtbag-ic-scope') as VtbagIcScopeElement).element;
				} else {
					groupElement = this.closest('vtbag-ic-group') as VtbagIcGroupElement;
					name = `::view-transition-${name}(${groupElement.name})`;
					scope = groupElement.scope.element;
				}
				// todo: simplify
				this.#computedStyle = scope?.ownerDocument.defaultView?.getComputedStyle(scope, name);

				// potentially "slotted" elements
				this.firstElementChild?.classList.add('children');
				this.insertAdjacentHTML(
					'afterbegin',
					`<span class="name">${this.getAttribute('name')?.replace('image-pair', 'pair').replace('group-children', 'children') || '::view-transition'}</span>`
				);

				if (this.getAttribute('name') === 'group-children') {
					const group = this.closest<VtbagIcAnimationsElement>('vtbag-ic-animations')!
						.groupMaps.get(key(scope))
						?.get(groupElement!.name) as Group;
					let html = '<select name="children">';
					group.children.forEach(
						(g) =>
							(html += `<option name="${g.name}">${g.name.replace(
								/-vtbag-match-element-([0-9]+)/,
								(_, num) => `match-element${toSup('(' + num + ')')}`
							)}</option>`)
					);
					html += '</select>';
					this.insertAdjacentHTML('beforeend', html);
				}
			}
			this.render();
		}
		static get observedAttributes() {
			return ['name'];
		}

		get exists() {
			return this.#computedStyle?.width !== 'auto';
		}

		attributeChangedCallback(name: string, oldValue: string, newValue: string) {
			if (oldValue !== newValue) {
				this.#dirty = true;
				this.render();
			}
		}

		render() {
			if (this.isConnected && this.#dirty) {
				this.#dirty = false;

				/*
				root.querySelector<HTMLHeadElement>('.scope-path')!.innerText =
					this.getAttribute('path') || '';
				const list = root.querySelector('.anim-list')!;
				list.innerHTML = '';
				this.#animations.forEach((anim) => {
					const item = this.#item.cloneNode(true) as HTMLElement;
					item.querySelector<HTMLSpanElement>('.pseudo-name')!.innerText =
						anim.effect?.pseudoElement || 'none';
					item.querySelector<HTMLSpanElement>('.anim-name')!.innerText =
						(anim.constructor.name === 'CSSAnimation' && (anim as CSSAnimation).animationName) ||
						'none';
					list.appendChild(item);
				});*/
			}
		}
	}

	const sup = {
		'0': '⁰',
		'1': '¹',
		'2': '²',
		'3': '³',
		'4': '⁴',
		'5': '⁵',
		'6': '⁶',
		'7': '⁷',
		'8': '⁸',
		'9': '⁹',
		'(': '⁽',
		')': '⁾',
	};
	function toSup(s: string) {
		return s.replace(/\d|\(|\)/g, (d) => sup[d as keyof typeof sup] || d);
	}
	if (!customElements.get('vtbag-ic-pseudo')) customElements.define('vtbag-ic-pseudo', ICPseudo);
</script>
