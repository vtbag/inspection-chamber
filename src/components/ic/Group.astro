---
import Pseudo from './Pseudo.astro';
---

<Pseudo />
<template id="vtbag-ic-group">
	<h3 class="heading"></h3>
	<vtbag-ic-pseudo name="group">
		<div>
			<vtbag-ic-pseudo name="image-pair"><div></div></vtbag-ic-pseudo>
		</div>
	</vtbag-ic-pseudo>
</template>
<script>
	class ICGroup extends HTMLElement {
		#initialized = false;
		#animations: Animation[] = [];
		#dirty = false;

		constructor() {
			super();
		}
		connectedCallback() {
			if (!this.#initialized) {
				this.#initialized = true;
				this.appendChild(
					(document.getElementById('vtbag-ic-group') as HTMLTemplateElement).content.cloneNode(true)
				);
			}
			this.render();
		}

		get scope() {
			return this.closest('vtbag-ic-scope') as VtbagIcScopeElement;
		}

		get name() {
			return this.getAttribute('name') || '';
		}

		set name(value) {
			this.setAttribute('name', value);
		}

		get animations() {
			return this.#animations;
		}

		set animations(value: Animation[]) {
			this.#animations = value;
			this.#dirty = true;
			this.render();
		}

		render() {
			if (this.isConnected && this.#dirty) {
				const name = this.getAttribute('name') || '';
				let displayName = name;
				this.#dirty = false;
				this.style.viewTransitionName = CSS.escape(this.scope.path + '.' + name);
				if (name.startsWith('-vtbag-auto-'))
					displayName = 'auto' + '<span>(' + name.substring(name.lastIndexOf('-') + 1) + ')</span>';
				if (name.startsWith('-vtbag-match-element-'))
					displayName =
						'match-element' + '<span>(' + name.substring(name.lastIndexOf('-') + 1) + ')</span>';
				const heading = this.querySelector<HTMLHeadingElement>('h3')!;
				heading.innerHTML = displayName;
				if (!(this.querySelector('vtbag-ic-pseudo[name="group"]') as VtbagIcPseudoElement).exists) {
					heading.parentElement!.style.backgroundColor = 'darkred';
					heading.parentElement!.style.color = 'white';
					console.error('Group not found:', this.name);
				}

				const noOld = getComputedStyle(
					this.scope.element,
					`::view-transition-new(${name})`
				).getPropertyValue('--vtbag-ic-only-child');
				const noNew = getComputedStyle(
					this.scope.element,
					`::view-transition-old(${name})`
				).getPropertyValue('--vtbag-ic-only-child');
				const noChildren = getComputedStyle(
					this.scope.element,
					`::view-transition-image-pair(${name})`
				).getPropertyValue('--vtbag-ic-only-child');
				const imagePair = this.querySelector(
					'vtbag-ic-pseudo[name="image-pair"]'
				) as VtbagIcPseudoElement;
				console.log('Rendering group', this.name, {
					noOld,
					noNew,
					noChildren,
					imagePair,
				});
				noOld ||
					imagePair.lastElementChild!.insertAdjacentHTML(
						'beforeend',
						'<vtbag-ic-pseudo name="old"></vtbag-ic-pseudo'
					);
				noNew ||
					imagePair.lastElementChild!.insertAdjacentHTML(
						'beforeend',
						'<vtbag-ic-pseudo name="new"></vtbag-ic-pseudo>'
					);
				noChildren ||
					imagePair.insertAdjacentHTML(
						'afterend',
						'<vtbag-ic-pseudo name="group-children"></vtbag-ic-pseudo'
					);
			}
		}
	}
	if (!customElements.get('vtbag-ic-group')) customElements.define('vtbag-ic-group', ICGroup);
</script>
