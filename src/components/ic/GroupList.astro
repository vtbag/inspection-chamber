---
import Group from './Group.astro';
---

<Group />
<script>
	import { mayStartViewTransition } from '@vtbag/utensil-drawer/may-start-view-transition';

	class ICGroupList extends HTMLElement {
		#initialized = false;
		#animations: Animation[] = [];
		#dirty = false;
		groups: Map<string, VtbagIcGroupElement>;

		constructor() {
			super();
			this.groups = new Map();
		}
		connectedCallback() {
			if (!this.#initialized) {
				this.#initialized = true;
			}
			this.render();
		}

		get animations() {
			return this.#animations;
		}

		set animations(value: Animation[]) {
			this.#animations = value;
			this.#dirty = true;
			this.render();
		}

		async render() {
			if (this.isConnected && this.#dirty) {
				this.#dirty = false;
				const scope = this;

				//	const transition = mayStartViewTransition!(	() => {
				const newGroups = new Map<string, Animation[]>();
				this.#animations.forEach((anim) => {
					const groupName = (anim.effect as any as KeyframeEffect).pseudoElement?.replace(
						/::view-transition.*\((.*)\)/,
						'$1'
					);
					if (groupName) {
						let group = newGroups.get(groupName);
						if (!group) {
							group = [];
							newGroups.set(groupName, group);
						}
						group.push(anim);
					}
				});

				newGroups.forEach((group, name) => {
					this.refreshGroup(name, group);
				});
				this.groups.forEach((group, name) => {
					if (!newGroups.has(name)) {
						group.remove();
						this.groups.delete(name);
					}
				});
				[...this.children]
					.sort((a, b) =>
						(a as VtbagIcGroupElement).name
							.replace(/^(-vtbag-)/, '')
							.localeCompare((b as VtbagIcGroupElement).name.replace(/^(-vtbag-)/, ''))
					)
					.forEach((c) => this.appendChild(c));
				/*				},
					{ collisionBehavior: 'chaining', scope }
				);
				transition.updateCallbackDone.catch((e) => console.error(e));
				transition.updateCallbackDone.finally(() => console.log('updateCallbackDone'));
				transition.ready.catch((e) => console.error(e));
				transition.ready.finally(() =>
					console.log('ready', scope.getAnimations({ subtree: true }))
				);
				transition.finished.catch((e) => console.error(e));
				transition.finished.finally(() => console.log('finished'));*/
			}
		}
		private refreshGroup(name: string, animations: Animation[]) {
			let group = this.groups.get(name)!;
			if (!group) {
				this.insertAdjacentHTML('beforeend', `<vtbag-ic-group name="${name}"></vtbag-ic-group>`);
				group = this.lastElementChild! as VtbagIcGroupElement;
				this.groups.set(name, group);
			}
			if (
				group.animations.length !== animations.length ||
				group.animations.some((a, i) => a !== animations[i])
			) {
				group.animations = animations;
			}
		}
	}
	if (!customElements.get('vtbag-ic-group-list'))
		customElements.define('vtbag-ic-group-list', ICGroupList);
</script>
